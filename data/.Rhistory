#compare the three sentiment dictionaries
pride_prejudice <- tidy_books%>%
filter(book=='Pride & Prejudice')
pride_prejudice
afinn <- pride_prejudice%>%
inner_join(get_sentiments('afinn'))
pride_prejudice%>%
inner_join(get_sentiments('afinn'))
pride_prejudice%>%
inner_join(get_sentiments('afinn'))%>%
group_by(index=linenumber%/%80)
pride_prejudice%>%
inner_join(get_sentiments('afinn'))%>%
group_by(index=linenumber%/%80)%>%
summarise(sentiment=sum(score))
pride_prejudice%>%
inner_join(get_sentiments('afinn'))%>%
group_by(index=linenumber%/%80)%>%
summarise(sentiment=sum(score))
pride_prejudice%>%
inner_join(get_sentiments('afinn'))%>%
group_by(index=linenumber%/%80)%>%
summarise(sentiment=sum(score))%>%
mutate(method='AFINN')
afinn <-pride_prejudice%>%
inner_join(get_sentiments('afinn'))%>%
group_by(index=linenumber%/%80)%>%
summarise(sentiment=sum(score))%>%
mutate(method='AFINN')
bind_rows(pride_prejudice%>%
inner_join(get_sentiments('bing'))%>%
mutate(method='Bing et al.'),
pride_prejudice%>%
inner_join(get_sentiments('nrc')%>%
filter(sentiment%in% c('positive','negative')))%>%
mutate(method='NRC'))
bind_rows(pride_prejudice%>%
inner_join(get_sentiments('bing'))%>%
mutate(method='Bing et al.'),
pride_prejudice%>%
inner_join(get_sentiments('nrc')%>%
filter(sentiment%in% c('positive','negative')))%>%
mutate(method='NRC'))%>%
count(method, index=linenumber%/%80, sentiment)
bind_rows(pride_prejudice%>%
inner_join(get_sentiments('bing'))%>%
mutate(method='Bing et al.'),
pride_prejudice%>%
inner_join(get_sentiments('nrc')%>%
filter(sentiment%in% c('positive','negative')))%>%
mutate(method='NRC'))%>%
count(method, index=linenumber%/%80, sentiment)%>%
spread(sentiment, n, fill = 0)
bind_rows(pride_prejudice%>%
inner_join(get_sentiments('bing'))%>%
mutate(method='Bing et al.'),
pride_prejudice%>%
inner_join(get_sentiments('nrc')%>%
filter(sentiment%in% c('positive','negative')))%>%
mutate(method='NRC'))%>%
count(method, index=linenumber%/%80, sentiment)%>%
spread(sentiment, n, fill = 0)%>%
mutate(sentiment=positive-negative)
library(shiny); runApp('semester-2018/applied data science/project2/app/project2.R')
library(shiny); runApp('semester-2018/applied data science/project2/app/project2.R')
library(shiny)
library(shinydashboard)
library(googleway)
library(ggmap)
register_google(key = 'AIzaSyAz_yVSZuJDLZE79ouq6HkHQB8Yr3HsqZ4')
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
textInput(inputId = "origin", label = "Origin"),
textInput(inputId = "destination", label = "Destination"),
actionButton(inputId = "getRoute", label = "Get Rotue"),
google_mapOutput("myMap")
)
)
server <- function(input, output){
api_key <- "AIzaSyAz_yVSZuJDLZE79ouq6HkHQB8Yr3HsqZ4"
map_key <- "AIzaSyAz_yVSZuJDLZE79ouq6HkHQB8Yr3HsqZ4"
df_route <- eventReactive(input$getRoute,{
print("getting route")
o <- input$origin
d <- input$destination
return(data.frame(origin = o, destination = d, stringsAsFactors = F))
})
output$myMap <- renderGoogle_map({
df <- df_route()
print(df)
if(df$origin == "" | df$destination == "")
return()
res <- google_directions(
key = api_key
, origin = df$origin
, destination = df$destination,
mode = 'bicycling'
)
df_route <- data.frame(route = res$routes$overview_polyline$points)
google_map(key = map_key ) %>%
add_polylines(data = df_route, polyline = "route")
})
}
shinyApp(ui, server)
runApp('semester-2018/applied data science/project2/app/project2.R')
?gmap
install.packages('dismo')
runApp('semester-2018/applied data science/project2/app/project2.R')
get_googlemap('waco texas', zoom=12, maptype = 'roadmap')%>%ggmap()
qmap("columbia university", zoom = 12)
#find a place
m <- leaflet() %>%
addTiles()%>%
addMarkers(lng=174.768, lat=-36.852, popup = 'The birthplace of R')
m
runApp('semester-2018/applied data science/project2/app/project2.R')
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
tidy_books
library(tidyr)
jane_austen_sentiment <- tidy_books%>%
inner_join(get_sentiments('bing'))%>%
count(book, index=linenumber%/%80, sentiment)%>%
spread(sentiment, n, fill=0)%>%
mutate(sentiment=positive-negative)
jane_austen_sentiment
tidy_books%>%
inner_join(get_sentiments('bing'))
jane_austen_sentiment <- tidy_books%>%
inner_join(get_sentiments('bing'))%>%
count(book, index=linenumber%/%80, sentiment)
tidy_books%>%
inner_join(get_sentiments('bing'))%>%
count(book, index=linenumber%/%80, sentiment)
tidy_books%>%
inner_join(get_sentiments('bing'))%>%
count(book, index=linenumber%/%80, sentiment)%>%
spread(sentiment, n, fill=0)
jane_austen_sentiment <- tidy_books%>%
inner_join(get_sentiments('bing'))%>%
count(book, index=linenumber%/%80, sentiment)%>%
spread(sentiment, n, fill=0)%>%
mutate(sentiment=positive-negative)
jane_austen_sentiment
library(ggplot2)
ggplot(jane_austen_sentiment, aes(index, sentiment, fill=book))+
geom_col(show.legend = F)+
facet_wrap(~book, ncol = 2, scales = 'free_x')
#compare the three sentiment dictionaries
pride_prejudice <- tidy_books%>%
filter(book=='Pride & Prejudice')
afinn <-pride_prejudice%>%
inner_join(get_sentiments('afinn'))%>%
group_by(index=linenumber%/%80)%>%
summarise(sentiment=sum(score))%>%
mutate(method='AFINN')
bind_rows(pride_prejudice%>%
inner_join(get_sentiments('bing'))%>%
mutate(method='Bing et al.'),
pride_prejudice%>%
inner_join(get_sentiments('nrc')%>%
filter(sentiment%in% c('positive','negative')))%>%
mutate(method='NRC'))%>%
count(method, index=linenumber%/%80, sentiment)%>%
spread(sentiment, n, fill = 0)%>%
mutate(sentiment=positive-negative)
bing_and_nrc <- bind_rows(pride_prejudice%>%
inner_join(get_sentiments('bing'))%>%
mutate(method='Bing et al.'),
pride_prejudice%>%
inner_join(get_sentiments('nrc')%>%
filter(sentiment%in% c('positive','negative')))%>%
mutate(method='NRC'))%>%
count(method, index=linenumber%/%80, sentiment)%>%
spread(sentiment, n, fill = 0)%>%
mutate(sentiment=positive-negative)
bind_rows(afinn,
bing_and_nrc)%>%
ggplot(aes(index, sentiment, fill=method))+
geom_col(show.legend = FALSE)+
facet_wrap(~method, ncol=1, scales = 'free_y')
get_sentiments('nrc')
get_sentiments('nrc')%>%
filter(sentiment%in% c('positive',
'negative'))
get_sentiments('nrc')%>%
filter(sentiment%in% c('positive',
'negative'))%>%
count(sentiment)
get_sentiments('bing')
get_sentiments('bing')%>%
count(sentiments)
get_sentiments('bing')%>%
count(sentiment)
#most common positive and negative words
tidy_books
#most common positive and negative words
tidy_books %>%
inner_join(get_sentiments('bing'))
#most common positive and negative words
tidy_books %>%
inner_join(get_sentiments('bing'))%>%
count(word, sentiment, sort=TRUE)
#most common positive and negative words
tidy_books %>%
inner_join(get_sentiments('bing'))%>%
count(word, sentiment, sort=TRUE)%>%
ungroup()
#most common positive and negative words
tidy_word_counts <- tidy_books %>%
inner_join(get_sentiments('bing'))%>%
count(word, sentiment, sort=TRUE)%>%
ungroup()
#most common positive and negative words
bing_word_counts <- tidy_books %>%
inner_join(get_sentiments('bing'))%>%
count(word, sentiment, sort=TRUE)%>%
ungroup()
bing_word_counts
#plot
bing_word_counts%>%
group_by(sentiment)%>%
top_n(10)%>%
ungroup()
#plot
bing_word_counts%>%
group_by(sentiment)%>%
top_n(10)%>%
ungroup()%>%
mutate(word=reorder(word, n))
#plot
bing_word_counts%>%
group_by(sentiment)%>%
top_n(10)%>%
ungroup()%>%
mutate(word=reorder(word, n))%>%
ggplot(aes(word, n, fill=sentiment))
#plot
bing_word_counts%>%
group_by(sentiment)%>%
top_n(10)%>%
ungroup()%>%
mutate(word=reorder(word, n))%>%
ggplot(aes(word, n, fill=sentiment))+
geom_col(show.legend = F)
#plot
bing_word_counts%>%
group_by(sentiment)%>%
top_n(10)%>%
ungroup()%>%
mutate(word=reorder(word, n))%>%
ggplot(aes(word, n, fill=sentiment))+
geom_col(show.legend = F)+
facet_wrap(~sentiment, scales = 'free_y')
#plot
bing_word_counts%>%
group_by(sentiment)%>%
top_n(10)%>%
ungroup()%>%
mutate(word=reorder(word, n))%>%
ggplot(aes(word, n, fill=sentiment))+
geom_col(show.legend = F)+
facet_wrap(~sentiment, scales = 'free_y')%>%
labs(y='Contribution to sentiment',
x=NULL)
#plot
bing_word_counts%>%
group_by(sentiment)%>%
top_n(10)%>%
ungroup()%>%
mutate(word=reorder(word, n))%>%
ggplot(aes(word, n, fill=sentiment))+
geom_col(show.legend = F)+
facet_wrap(~sentiment, scales = 'free_y')%>%
labs(y='Contribution to sentiment',
x=NULL)+
coord_flip()
#plot
bing_word_counts%>%
group_by(sentiment)%>%
top_n(10)%>%
ungroup()%>%
mutate(word=reorder(word, n))%>%
ggplot(aes(word, n, fill=sentiment))+
geom_col(show.legend = F)+
facet_wrap(~sentiment, scales = 'free_y')%>%
labs(y='Contribution to sentiment',
x=NULL)+
coord_flip()
#most common positive and negative words
bing_word_counts <- tidy_books %>%
inner_join(get_sentiments('bing'))%>%
count(word, sentiment, sort=TRUE)%>%
ungroup()
#plot
bing_word_counts%>%
group_by(sentiment)%>%
top_n(10)%>%
ungroup()%>%
mutate(word=reorder(word, n))%>%
ggplot(aes(word, n, fill=sentiment))+
geom_col(show.legend = F)+
facet_wrap(~sentiment, scales = 'free_y')%>%
labs(y='Contribution to sentiment',
x=NULL)+
coord_flip()
custom_stop_words <- bind_rows(data_frame(word=c('miss'),
lexicon=c('custom')),
stop_words)
custom_stop_words
library(wordcloud)
install.packages('wordcloud')
tidy_books%>%
anti_join(stop_words)
tidy_books%>%
anti_join(stop_words)%>%
count(word)
tidy_books%>%
anti_join(stop_words)%>%
count(word)%>%
with(wordcloud(word, n, max.words=100))
library(wordcloud)
tidy_books%>%
anti_join(stop_words)%>%
count(word)%>%
with(wordcloud(word, n, max.words=100))
library(reshape2)
tidy_books%>%
inner_join(get_sentiments('bing'))
tidy_books%>%
inner_join(get_sentiments('bing'))%>%
count(word, sentiment, sort=T)
tidy_books%>%
inner_join(get_sentiments('bing'))%>%
count(word, sentiment, sort=T)%>%
acast(word~sentiment,value.var = 'n',fill=0)
tidy_books%>%
inner_join(get_sentiments('bing'))%>%
count(word, sentiment, sort=T)%>%
acast(word~sentiment,value.var = 'n',fill=0)%>%
comparison.cloud(colors = c('gray20','gray80'),max.words = 100)
prideprejudice
PandP_sentences <-data_frame(text=prideprejudice)%>%
unnest_tokens(sentences, text, token='sentences')
PandP_sentences
PandP_sentences$sentences[2]
austen_books()%>%
group_by(book)
austen_books()%>%
group_by(book)%>%
unname(chapter, text, token='regex',
pattern='Chapter|CHAPTER[\\dIVXLC]')
austen_books()%>%
group_by(book)%>%
unnest_tokens(chapter, text, token='regex',
pattern='Chapter|CHAPTER[\\dIVXLC]')
austen_books()%>%
group_by(book)%>%
unnest_tokens(chapter, text, token='regex',
pattern='Chapter|CHAPTER[\\dIVXLC]')%>%
ungroup()
austen_chapter <-austen_books()%>%
group_by(book)%>%
unnest_tokens(chapter, text, token='regex',
pattern='Chapter|CHAPTER[\\dIVXLC]')%>%
ungroup()
austen_chapters <-austen_books()%>%
group_by(book)%>%
unnest_tokens(chapter, text, token='regex',
pattern='Chapter|CHAPTER[\\dIVXLC]')%>%
ungroup()
austen_chapters
austen_chapters %>%
group_by(book)
austen_chapters %>%
group_by(book)%>%
summarise(chapters=n())
PandP_sentences <- data_frame(text = prideprejudice) %>%
unnest_tokens(sentence, text, token = "sentences")
austen_chapters <- austen_books() %>%
group_by(book) %>%
unnest_tokens(chapter, text, token = "regex",
pattern = "Chapter|CHAPTER [\\dIVXLC]") %>%
ungroup()
austen_chapters %>%
group_by(book) %>%
summarise(chapters = n())
get_sentiments('bing')
get_sentiments('bing')%>%
filter(sentiment=='negative')
bingnegative <-get_sentiments('bing')%>%
filter(sentiment=='negative')
wordcounts <- tidy_books %>%
group_by(book, chapter) %>%
summarize(words = n())
tidy_books %>%
semi_join(bingnegative) %>%
group_by(book, chapter) %>%
summarize(negativewords = n()) %>%
left_join(wordcounts, by = c("book", "chapter")) %>%
mutate(ratio = negativewords/words) %>%
filter(chapter != 0) %>%
top_n(1) %>%
ungroup()
library(gutenbergr)
physics <- gutenberg_download(c(37729, 14725, 13476, 5001),
meta_fields = "author")
physics_words
physics_words <- physics %>%
unnest_tokens(word, text) %>%
count(author, word, sort = TRUE) %>%
ungroup()
physics_words
plot_physics %>%
group_by(author) %>%
top_n(15, tf_idf) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf)) %>%
ggplot(aes(word, tf_idf, fill = author)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~author, ncol = 2, scales = "free") +
coord_flip()
plot_physics <- physics_words %>%
bind_tf_idf(word, author, n) %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
mutate(author = factor(author, levels = c("Galilei, Galileo",
"Huygens, Christiaan",
"Tesla, Nikola",
"Einstein, Albert")))
plot_physics %>%
group_by(author) %>%
top_n(15, tf_idf) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf)) %>%
ggplot(aes(word, tf_idf, fill = author)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~author, ncol = 2, scales = "free") +
coord_flip()
library(stringr)
physics%>%
filter(str_detect(text, 'eq\\.'))
physics%>%
filter(str_detect(text, 'eq\\.'))%>%
select(text)
physics%>%
filter(str_detect(text, "K1"))
physics%>%
filter(str_detect(text, "K1"))%>%
select(text)
mystopwords <- data_frame(word = c("eq", "co", "rc", "ac", "ak", "bn",
"fig", "file", "cg", "cb", "cm"))
physics_words <- anti_join(physics_words, mystopwords, by = "word")
physics_words %>%
bind_tf_idf(word, author, n) %>%
arrange(desc(tf_idf))
physics_words %>%
bind_tf_idf(word, author, n) %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word))))
plot_physics <- physics_words %>%
bind_tf_idf(word, author, n) %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(author) %>%
top_n(15, tf_idf) %>%
ungroup %>%
mutate(author = factor(author, levels = c("Galilei, Galileo",
"Huygens, Christiaan",
"Tesla, Nikola",
"Einstein, Albert")))
ggplot(plot_physics, aes(word, tf_idf, fill = author)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~author, ncol = 2, scales = "free") +
coord_flip()
plot_physics
ggplot(plot_physics, aes(word, tf_idf, fill = author)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~author, ncol = 2, scales = "free") +
coord_flip()
library(dplyr)
austen_books()
rm(list=ls())
austen_books()
austen_books()
library(shiny); runApp('semester-2018/applied data science/project2/app/project2.R')
library(shiny); runApp('semester-2018/applied data science/project2/app/project2.R')
library(shiny); runApp('semester-2018/applied data science/project2/app/project2.R')
runApp('GitHub/Fall2018-Project2-sec2_proj2_grp1/app/pro2')
runApp('GitHub/Fall2018-Project2-sec2_proj2_grp1/app/pro2')
runApp('GitHub/Fall2018-Project2-sec2_proj2_grp1/app/pro2')
#functions
getwd()
setwd("~/GitHub/Fall2018-Project2-sec2_proj2_grp1/data")
runApp('~/GitHub/Fall2018-Project2-sec2_proj2_grp1/app/pro2')
runApp('~/GitHub/Fall2018-Project2-sec2_proj2_grp1/app/pro2')
runApp('~/GitHub/Fall2018-Project2-sec2_proj2_grp1/app')
